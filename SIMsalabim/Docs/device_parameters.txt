** Device data:
** Don't change the order of the parameters, comments can be added anywhere,
** but only after an '*'. Use '**' if you want your comment to be left-justified.
** version: 3.77

**General**************************************************************************
T = 295                  * K, absolute temperature
L = 500e-9               * m, device length/thickness
eps_r = 4.0              * relative dielectric constant
CB = 3.0                 * eV, conduction band edge
VB = 5.0                 * eV, valence band edge
Nc = 1e26                * m^-3, DOS of conduction and valence bands (not cricital)
n_0 = 0e25               * m^-3, ionised n-doping at zero field
p_0 = 0e22               * m^-3, ionised p-doping at zero field
beta_n = 0               * (m/V)^0.5, field  activation factor of n_0
beta_p = 0               * (m/V)^0.5, field  activation factor of p_0

**Mobilities************************************************************************
mun_0 = 1.0E-8           * m^2/Vs, zero field mobility
mup_0 = 1.0E-7           * m^2/Vs, zero field mobility
mob_n_dep = 0            * 0 : const. mob, 1 : field-dep., 2 : get mobility from table specified in n_file
mob_p_dep = 0            * 0 : const. mob, 1 : field-dep., 2 : get mobility from table specified in p_file
gamma_n = 0              * (m/V)^0.5, field dependence of mob, Poole-Frenkel form
gamma_p = 0              * (m/V)^0.5
n_file = mob_n.txt       * name of file with tabulated electron mobility
p_file = mob_p.txt       * name of file with tabulated hole mobility
extra_F = 1              * whether (1) or not (0) to extrapolate F beyond its max. value in n_file
extra_ln_mob = 1         * whether (1) or not (0) to inter-/ extrapolate ln(mob) instead of mob in n_file
Dn_dep = 0               * 0 : Einstein, 1 : value (eta_n) times Einstein
Dp_dep = 0               * 0 : Einstein, 1 : value (eta_p) times Einstein
eta_n = 2                * multiplication factor Dn; Dn = eta_n Vt mun
eta_p = 2                * multiplication factor Dp; Dp = eta_p Vt mup

**Contacts**************************************************************************
W_L = 3.6                * eV, work function left electrode (= cathode)
W_R = 5.0                * eV, work function right electrode (= anode)
ImageLowering = 0        * whether (1) or not (<>1) to use image-force lowering of barriers.
                         * Note: only works for electrons at left and holes at right electrode
                         * and only if surface recombination is infinite.
RoughLeft = 0            * extra barrier lowering due to roughness of cathode
RoughRight = 0           * extra barrier lowering due to roughness of anode
SnMin = -1e-10           * m/s, surface recombination of electrons at anode (minority carriers)
SpMin = -1e-10           * m/s, surface recombination of holes at cathode (minority carriers)
SnMaj = -1e-5            * m/s, surface recombination of electrons at cathode (majority carriers)
SpMaj = -1e-5            * m/s, surface recombination of holes at anode (majority carriers)
                         * nb: use negative values if Sn/pMin/Maj should be infinite
Rshunt = -1e0            * Ohms m2, shunt resistance. Use negative value for infinite Rshunt
Rseries = 0e-4           * Ohms m2, series resistance.

**Transport layers******************************************************************
L_LTL = 0e-9            * m, thickness left TL
L_RTL = 0e-9            * m, thickness right TL
doping_LTL = -0e23       * m^-3, doping in left TL
                         * if >0 p-type doping if <0 n-type doping
doping_RTL = 0e23        * m^-3, doping in right TL
                         * if >0 p-type doping if <0 n-type doping
mob_LTL = 1E-6           * m2/Vs, mobility of left TL, constant (case 0) only.
mob_RTL = 1E-6           * m2/Vs, mobility of right TL, constant (case 0) only.
eps_r_LTL = 3.5          * relative dielectric constant left TL
eps_r_RTL = 3.5          * relative dielectric constant right TL
CB_LTL = 3.0             * eV, conduction band left TL
CB_RTL = 2.5             * eV, conduction band right TL
VB_LTL = 5.5             * eV, valence band left TL
VB_RTL = 5.0             * eV, valence band right TL
TLsAbsorb = 0            * TLs absorb yes(1)/no(0), overrides profile!
TLsTrap = 0              * traps in TLs yes(1)/no(0)

**Ions******************************************************************************
CIM = 0e21               * m^-3, concentration of ions
mob_ion_spec = 0         * mobile ion species: -1: negative, 0: both, 1: positive ions
ion_red_rate = 0         * ion redistribution rate, number of voltage steps after which ions
                         * redistribute (ions only distributed at first voltage if ion_red_rate = 0)

**Generation and recombination******************************************************
Gmax = 1e27              * m^-3 s^-1, average generation rate
Gfrac = 1                * fraction of Gmax used in solar cell
Gen_profile = none       * name of file generation profile (or 'none')
Field_dep_G = 0          * field dependent generation yes (1) or no (0)
P0 = 0.0                 * 0<=P0<1, fraction of quenched excitons that direcltly yield free carriers
a = 1.1e-9               * m, charge separation distance, Braun model used
ThermLengDist = 2        * distribution of a, 1 for delta function, 2 for Gaussian
                         * 3 for exponential and 4 for r^2 exponential 5 for r^4 Gaussian
kf = 1e7                 * 1/s, decay rate
kdirect = 1e-15          * m3/s, direct (band-to-band, bimolecular) recombination rate
Lang_pre = 1e-1          * Langevin recombination prefactor
UseLangevin = 1          * (1) use Langevin to calc. recombination or not (<>1, kdirect is used)

**Trapping**************************************************************************
** To select 'no trapping', put trap densities (Nt, Pt) equal to zero
** FOR ALL TRAP DENSITIES: IF < 0 ELECTRON TRAPS, IF > 0 HOLE TRAPS
** Bulk traps
Bulk_tr = 0e22           * m^-3, trap density (in bulk)
** Surface traps
LTL = 0e-9               * m, thickness left interface trap layer
LTR = 0e-9               * m, thickness right interface trap layer
St_L = -0e15             * m^-2, left interface trap density
St_R = 0e15              * m^-2, right interface trap density
** Grain boundaries
num_GBs = 0              * number of grain boundaries
GB_tr = -1e16            * m^-2, grain boundary trap density per grain boundary
L_GB = 50e-9             * m, thickness of the grain boundaries
** trap coefficients
Cn = 1e-13               * m^3/s, capture coefficient for electrons (put to 0 to exclude SRH)
Cp = 1e-13               * m^3/s, capture coefficient for holes (put to 0 to exclude SRH)
Trtype = 0               * trap type electrons 0: single level, 1 : exponential
Etrap = 0.5              * eV, energy of single hole (elec.) trapping level above (below) valence (conduction) band
Ttr = 1000               * K, characteristic trap temperature electrons, exponential distr.
Q_charge = 1             * sign of filled bulk trap 0: neutral, 1: charged

**Numerical Parameters**************************************************************
NP = 100                 * integer, number of grid points, must be at least 5.
tolPois = 1e-7           * abs. tolerance of iterative Poisson solver
maxDelV = 1              * maximum change (in Vt) of the potential per loop
accPois = 1              * accelation parameter for Poisson solver, 0 < accPois < 2
accDens = 1              * accelation parameter for density solver, 0 < accDens < 2
resetNegDens = 1         * integer, whether(1) or not(0) to reset points with a negative density
tolMain = 1e-7           * relative tolerance of density solver
Conv_Var = 1             * 1 selects current to be monitored for convergence in main loop
                         * <>1 selects the densities
MaxItPois = 1e2          * max. number it. Poisson loop
MaxItMain = 1e3          * max. number it. main loop
grad = 0                 * determines shape of exp. grid, increase grad for smaller h[1]
TolRomb = 1e-2           * relative tolerance of Romberg integration, 1e-2 is a good
                         * starting point
MaxRombIt = 15           * max. # of iterations in Romberg integration, 10 is sufficient
LowerLimBraun = 0.01     * Lower limit of integration of distribution of a in terms of a
                         * should be non-zero (otherwise division by zero)!
UpperLimBraun = 10       * Upper limit of integration of distribution of a in terms of a
                         * only relevant if ThermLengDist<>1 (delta function)
                         * 10 seems sufficient for Gaussian, but for r^2 exp., use 20

**Voltage range of simulation*******************************************************
Vdistribution = 1        * 1 for uniform (specified by Vstep), 2 for logarithmic (specified by Vconv and NJV)
PreCond = 0              * pre-conditioning, yes(1)/no(0)
Vpre = 0.0               * V, pre-conditioned voltage
Vscan = 1                * integer, > 0 for forward sweep direction, < 0 for reverse sweep
Vmin = 0.0               * V
Vmax = 1.5               * V
Vstep = 0.05             * V
Vacc = -0.1              * V, point of accumulation of row of V's, note: Vacc should be
                         * slightly larger than Vmax or slightly lower than Vmin
NJV = 50                 * number of JV points in logarithmic distribution
until_Voc = 0            * if 1 then SIMsalabim will stop at Voc

**User interface********************************************************************
Pause_at_end = 0         * pause at the end of the simulation yes(1) or no (0)
AutoTidy = 0             * if 1, then SIMsalabim will always tidy up this file
UseExpData = 0           * if 1, SIMsalabim will try to read JV_Exp and use it
ExpJV = jvexp.txt        * name of file with experimental JV characteristics
rms_mode = log           * lin or log: use J or log(J) in calc. of rms error
rms_threshold = 0.8      * threshold of fraction converged points in calc. rms error
log_file = log.txt       * name of log file
JV_file = JV.dat         * name of the file with simulated JV characteristics
Var_file = Var.dat       * name of the file with (x,V,n,p,Jn,Jp,etc.) at V=Vmax
scPars_file = scPars.dat * solar cell parameters file
